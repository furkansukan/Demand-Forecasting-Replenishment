# -*- coding: utf-8 -*-
"""demand-forecasting-replenishment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17BRWT_cOsm6nZqCfQfdF2MIxpN4VFANg
"""

import numpy as np
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

"""# Örnek Veri Seti Oluşturma"""

# Rastgelelik için seed belirleme
np.random.seed(42)

# Başlangıç ve bitiş tarihlerini belirleme
start_date = "2021-01-01"
end_date = "2024-12-03"

# Tarih sütunu
dates = pd.date_range(start=start_date, end=end_date)

# Gün sayısını güncelle
n_days = len(dates)

# Günlük talep (y değişkeni) rastgele dağılım
daily_sales = np.random.randint(5, 15, size=n_days)  # 5 ile 15 arasında rastgele satışlar

# Başlangıç stok seviyesi
initial_stock = np.random.randint(50, 100)  # Başlangıç stok seviyesi (random)

# Stok seviyesi (stock_level) ve yenileme
stock_levels = [initial_stock]
for sales in daily_sales:
    current_stock = stock_levels[-1] - sales
    if current_stock <= 10:  # Yeniden sipariş eşiği
        current_stock += np.random.randint(50, 150)  # Rastgele yenileme miktarı
    stock_levels.append(current_stock)

# Son stok seviyesini eşitlemek
stock_levels = stock_levels[:-1]

# Veri çerçevesi oluşturma
df = pd.DataFrame({
    "ds": dates,
    "y": daily_sales,
    "stock_level": stock_levels
})

df.head()

# Günlük veri görselleştirme
plt.figure(figsize=(12, 6))
plt.plot(df["ds"], df["y"], label="Günlük Talep", color="blue", alpha=0.7)
plt.plot(df["ds"], df["stock_level"], label="Günlük Stok Seviyesi", color="green", alpha=0.7)
plt.title("Günlük Talep ve Stok Seviyesi")
plt.xlabel("Tarih")
plt.ylabel("Değer")
plt.legend()
plt.grid()
plt.show()

# Haftalık veri oluşturma
weekly_df = df.resample('W', on='ds').sum()

# Haftalık veri görselleştirme
plt.figure(figsize=(12, 6))
plt.plot(weekly_df.index, weekly_df["y"], label="Haftalık Talep", color="blue", alpha=0.7)
plt.plot(weekly_df.index, weekly_df["stock_level"], label="Haftalık Stok Seviyesi", color="green", alpha=0.7)
plt.title("Haftalık Talep ve Stok Seviyesi")
plt.xlabel("Tarih")
plt.ylabel("Değer")
plt.legend()
plt.grid()
plt.show()

# Aylık veri oluşturma
monthly_df = df.resample('M', on='ds').sum()

# Aylık veri görselleştirme
plt.figure(figsize=(12, 6))
plt.plot(monthly_df.index, monthly_df["y"], label="Aylık Talep", color="blue", alpha=0.7)
plt.plot(monthly_df.index, monthly_df["stock_level"], label="Aylık Stok Seviyesi", color="green", alpha=0.7)
plt.title("Aylık Talep ve Stok Seviyesi")
plt.xlabel("Tarih")
plt.ylabel("Değer")
plt.legend()
plt.grid()
plt.show()

"""# Talep Tahmini (Demand Forecasting)"""

# Prophet modeli için veri hazırlığı
product_df = df[["ds", "y"]]

# Prophet modelini oluştur ve eğit
model = Prophet()
model.fit(product_df)

# Tahmin süresi (30 gün)
future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)

# Tahmin sonuçlarını dataframe olarak göster
forecast_30_days = forecast.tail(30)[["ds", "yhat"]]

# Grafiksel görselleştirme
plt.figure(figsize=(12, 6))
model.plot(forecast)
plt.title("Talep Tahmini (30 Gün)")
plt.xlabel("Tarih")
plt.ylabel("Talep")
plt.grid()
plt.show()

# Tahmin edilen 30 günlük veriyi göster
forecast_30_days

"""# Optimal Sipariş Miktarı (EOQ Hesabı)

Optimal sipariş miktarını (EOQ - **Economic Order Quantity**) belirlemek için şu adımları izleyebiliriz:

1. **EOQ Formülü**:
   \[
   EOQ = \sqrt{\frac{{2 \cdot D \cdot S}}{{H}}}
   \]
   Burada:
   - \(D\): Toplam talep (örneğin, 30 günlük tahmin edilen toplam talep).
   - \(S\): Sipariş başına sabit maliyet (örneğin, 50 birim).
   - \(H\): Birim başına yıllık tutma maliyeti (örneğin, 2 birim).

2. **Tahmin Edilen Günlük Talep**:
   Prophet modeli ile tahmin edilen 30 günlük toplam talep hesaplanır.

3. **Hesaplama**:
   EOQ formülü uygulanarak optimal sipariş miktar{omal_order_quantity:.2f} birim")
```

### Açıklamalar:
1. Prophet modeliyle tahmin edilen \(yhat\) (ortalama tahmin değerleri) üzerinden 30 günlük toplam talep hesaplanır.
2. EOQ fonksiyonunda sipariş ve tutma maliyetleri kullanıcı tarafından belirlenir. Bunları işletmenize uygun şekilde güncelleyebilirsiniz.
3. Çıktı:
   - **Tahmin Edilen 30 Günlük Toplam Talep**: Prophet modelinden alınan sonuçların toplamıdır.
   - **Optimal Sipariş Miktarı (EOQ)**: Yukarıdaki formüle göre hesaplanan sipariş miktarıdır.

Bu kodu çalıştırarak ürün bazında EOQ değerini hesaplayabilirsiniz. Prophet modelinden elde edilen tahminlere dayalı olduğu için stok yenileme stratejisi de bu sonuçlara göre optimize edilebilir.
"""

# EOQ hesaplama fonksiyonu
def eoq(demand, ordering_cost, holding_cost):
    """
    Economic Order Quantity (EOQ) hesaplama.
    """
    return np.sqrt((2 * demand * ordering_cost) / holding_cost)

# Sipariş ve tutma maliyetleri
ordering_cost = 50  # Sipariş başına maliyet
holding_cost = 2  # Birim başına yıllık tutma maliyeti

# Tahmin edilen 30 günlük toplam talep
total_demand_30_days = forecast_30_days["yhat"].sum()

# EOQ Hesaplama
optimal_order_quantity = eoq(total_demand_30_days, ordering_cost, holding_cost)

# Çıktı
print(f"Tahmin Edilen 30 Günlük Toplam Talep: {total_demand_30_days:.2f}")
print(f"Optimal Sipariş Miktarı (EOQ): {optimal_order_quantity:.2f} birim")

"""# Yeniden Sipariş Zamanlaması (Replenishment Planı)

Yeniden sipariş planı oluşturmak için şu adımları izleriz:

---

### 1. **Mevcut Stok Bilgisi**
- Veri çerçevesindeki **stock_level** bilgisini kullanırız.
- Yeniden sipariş seviyesi (reorder level), tahmini günlük talep ve tedarik süresine (lead time) göre hesaplanır:
  \[
  \text{Reorder Level} = \text{Daily Demand Average} \times \text{Lead Time}
  \]

---

### 2. **Replenishment Planı**
- **EOQ**'ya göre optimal sipariş miktarını kullanırız.
- Her gün için stok seviyesi tahmini günlük talep ile azaltılır.
- Stok seviyesi yeniden sipariş seviyesinin altına düştüğünde sipari---el("Stok Seviyesi")
plt.legend()
plt.grid()
plt.show()
```

---

### Çıktılar:
1. **Sipariş Planı Tablosu**:
   - Tarih (`Date`): Siparişin verilmesi gereken tarih.
   - Sipariş Miktarı (`Order Quantity`): Sipariş miktarı (EOQ ile hesaplanan miktar).

2. **Grafik**:
   - Stok seviyesi çizgisi.
   - Yeniden sipariş seviyesi (kırmızı kesikli çizgi).
   - Sipariş verilen günler (yeşil kesikli çizgiler).

---

Bu plan, stok seviyelerinin sürekli izlenmesini ve tahminlere dayalı otomatik sipariş zamanlamasını sağlar. EOQ ve talep tahmini kullanılarak stok optimizasyonu sağlanır.
"""

# Lead time ve yeniden sipariş seviyesi
lead_time = 3  # Siparişin ulaşması için gereken gün sayısı
reorder_level = forecast_30_days["yhat"].mean() * lead_time  # Yeniden sipariş seviyesi

# Mevcut stok seviyesi
current_stock = df["stock_level"].iloc[-1]  # Mevcut stok

# Sipariş planı tablosunu başlatma
replenishment_plan = []
# Stok seviyesini bir liste olarak başlat
stock_levels_simulated = [current_stock]  # Mevcut stok başlangıcı
order_dates = []  # Sipariş verilen günlerin tarihleri

# 30 günlük tahmin üzerinden stok seviyesi simülasyonu
for i, row in forecast_30_days.iterrows():
    daily_demand = row["yhat"]  # Günlük tahmin edilen talep
    new_stock_level = stock_levels_simulated[-1] - daily_demand  # Stok seviyesini düşür

    # Eğer stok seviyesi yeniden sipariş seviyesinin altına düşerse
    if new_stock_level <= reorder_level:
        order_dates.append(row["ds"])  # Sipariş tarihini kaydet
        new_stock_level += optimal_order_quantity  # EOQ ile stok artırımı

    stock_levels_simulated.append(new_stock_level)  # Güncellenmiş stok seviyesini ekle

# Grafiksel görselleştirme
plt.figure(figsize=(12, 6))
plt.plot(forecast_30_days["ds"], stock_levels_simulated[1:], label="Stok Seviyesi", color="blue")  # İlk elemanı atla
plt.axhline(reorder_level, color="red", linestyle="--", label="Yeniden Sipariş Seviyesi")
for date in order_dates:
    plt.axvline(date, color="green", linestyle="--", label="Sipariş Verilen Gün")
plt.title("Stok Seviyesi ve Sipariş Zamanlaması")
plt.xlabel("Tarih")
plt.ylabel("Stok Seviyesi")
plt.legend()
plt.grid()
plt.show()

